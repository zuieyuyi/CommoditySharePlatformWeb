<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    
    <context:component-scan base-package="com.commodityshareplatform.web">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 导入配置文件
       若要切换数据库环境则需改动数据库配置文件
     -->
    <context:property-placeholder location="classpath:/dev/jdbc.properties"></context:property-placeholder>

    <!--数据库连接池配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" lazy-init="false">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="maxWait" value="${jdbc.maxWait}" />

<!--        <property name="filters" value="stat,wall" />-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="3000" />-->
<!--        <property name="minEvictableIdleTimeMillis" value="300000" />-->
<!--        <property name="validationQuery" value="SELECT 'x'" />-->
<!--        <property name="testWhileIdle" value="true" />-->
<!--        <property name="testOnBorrow" value="false" />-->
<!--        <property name="testOnReturn" value="false" />-->
<!--        <property name="poolPreparedStatements" value="true" />-->
<!--        <property name="maxPoolPreparedStatementPerConnectionSize"-->
<!--                  value="20" />-->
    </bean>


    <!-- jdbcTemplate -->
    <bean id="jdbc" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
    </bean>

    <!-- mybatis配置 -->

    <!-- 配置扫描器，将mybatis接口的实现加到ioc容器中 -->
    <!-- 配置和mybatis的整合 -->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--        &lt;!&ndash; 指定mybatis全局配置的文件的位置 &ndash;&gt;-->
<!--        <property name="configLocation" value="classpath:mybatis.xml"></property>-->
<!--        <property name="dataSource" ref="dataSource"></property>-->
<!--        &lt;!&ndash; 指定mapper文件的位置 &ndash;&gt;-->
<!--        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 配置一个可以批量操作的sqlSession &ndash;&gt;-->
<!--    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
<!--        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
<!--        <constructor-arg name="executorType" value="BATCH"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 配置扫描器，将mybatis接口的实现加到ioc容器中 &ndash;&gt;-->
<!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        &lt;!&ndash; 扫描所有dao接口的实现加入到ioc容器中 &ndash;&gt;-->
<!--        <property name="basePackage" value="com.commodityshareplatform.web.*.dao"></property>-->
<!--    </bean>-->

    <!-- 事务控制的配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据源 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- shiro配置 -->
    <!-- 1、配置SecurityManage -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager" >
        <!-- 配置缓存管理器 -->
        <!--        <property name="cacheManager" ref="cacheManager"></property>-->
        <!-- 认证授权 -->
        <!--        <property name="realm" ref="jdbcRealm"></property>-->
        <!-- 配置多个realm -->
        <!--
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"></ref>
            </list>
        </property>
        -->
    </bean>
    <!--
    配置 CacheManager.
    需要加入 ehcache 的 jar 包及配置文件.
    -->

    <!--    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
    <!-- 缓存配置文件 -->
    <!--      <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
    <!--    </bean>-->

    <!--
    配置 Realm
    直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->
    <!--    <bean id="jdbcRealm" class="com.shiro.test.realm.MyRealm">-->
    <!-- 通过配置credentialsMatcher属性来，替换realm的加密算法 -->
    <!--        <property name="credentialsMatcher">-->
    <!--            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
    <!--                &lt;!&ndash; 指定加密方式 &ndash;&gt;-->
    <!--                <property name="hashAlgorithmName" value="MD5"></property>-->
    <!--                &lt;!&ndash; 指定加密次数 &ndash;&gt;-->
    <!--                <property name="hashIterations" value="100"></property>-->
    <!--            </bean>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!--
    配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--
    启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
    配置 ShiroFilter.
    id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/to_login"/>
        <property name="successUrl" value="/list"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!--
            配置哪些页面需要受保护.
            以及访问这些页面需要的权限.
            1). anon 可以被匿名访问
            2). authc 必须认证(即登录)后才可能访问的页面.
            3). logout 登出.
            4). roles 角色过滤器
        -->

        <!--       <property name="filterChainDefinitions">
                   <value>
                       /login = anon
                       /to_login = anon
                       /logout = logout
                       /unauthorized = anon

                       /** = authc
                   </value>
               </property>-->
    </bean>
</beans>